{"version":3,"sources":["components/Anonymous.js","App.js","serviceWorker.js","index.js"],"names":["Anonymous","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","randomValue","selectCountry","handleSetSelectCountry","e","setState","target","value","copyText","handleSetRandomValue","max","fnumber","data","Math","floor","random","handleCopyText","document","getElementById","select","execCommand","setTimeout","inherits","createClass","key","react_default","a","createElement","className","style","color","marginBottom","onChange","type","placeholder","id","onClick","data-tooltip","Component","App","BrowserRouter","Route","exact","path","component","Redirect","to","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2630b96a.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react'\nexport class Anonymous extends Component {\n  state = {\n    randomValue: '',\n    selectCountry: 'SP',\n  }\n\n  handleSetSelectCountry = e => {\n      this.setState({ \n          randomValue : '',\n          selectCountry : e.target.value,\n          copyText: ''\n      })\n  }\n\n  handleSetRandomValue = () => {\n      const { selectCountry } = this.state\n      const max = selectCountry === 'SP' ? 99999999 : 999999999\n      const fnumber = selectCountry === 'SP' ? '+65' : '+855'\n      const data = Math.floor(Math.random() * Math.floor(max))\n      this.setState({ randomValue : fnumber + data })\n  }\n\n  handleCopyText = () => {\n      const copyText = document.getElementById(\"randomInput\");\n      copyText.select();\n      document.execCommand(\"copy\");\n      this.setState({ copyText : `ก็อปปี้สำเร็จ!`})\n      setTimeout(() => {\n          this.setState({ copyText : '' })\n      }, 3000);\n  }\n\n\n  render() {\n    return (\n      <div>\n        <header className=\"App-Header\">\n            <center>\n              <h1 className=\"title\" style={{ color : \"#fff\" , marginBottom: 40 }}>\n                  โปรแกรมสุ่มหมายเลขโทรศัพท์\n              </h1>\n            </center>\n            <div className=\"field has-addons\">\n                <p className=\"control is-expanded\">\n                    <span className=\"select\">\n                        <select onChange={this.handleSetSelectCountry}>\n                            <option value=\"SP\">สิงค์โปร +65</option>\n                            <option value=\"KB\">กัมพูชา +855</option>\n                        </select>\n                    </span>\n                </p>\n                <p className=\"control is-expanded\">\n                    <input className=\"input\" type=\"text\" placeholder=\"กดปุ่ม Random เพื่อสุ่ม\" value={this.state.randomValue} id=\"randomInput\" />\n                </p>\n                <p className=\"control is-expanded\">\n                    <a className=\"button is-info\" onClick={this.handleSetRandomValue}>\n                        Random\n                    </a>\n                </p>\n                <a className=\"button is-warning\" data-tooltip=\"Tooltip Text\" onClick={this.handleCopyText}>\n                    Copy\n                </a>\n            </div>\n            <center>\n              <h2 className=\"title\" style={{ color : \"#fff\" }}>\n                  {this.state.copyText}\n              </h2>\n            </center>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default Anonymous\n","import React, { Component } from 'react';\nimport './styles/Portfolio.css';\nimport './styles/Parallax.scss';\nimport Anonymous from './components/Anonymous.js'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nclass App extends Component {\n  render() {    \n    return (\n      <div className=\"Parallax-bg\">\n        <Router>\n          <div>\n              <Route exact path=\"/\" component={Anonymous} />\n              <Redirect to=\"/\" />\n          </div>\n        </Router>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work off line and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}